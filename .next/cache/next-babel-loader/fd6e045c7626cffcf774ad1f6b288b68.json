{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport inventory from './inventory';\n\nfunction fetchCategories() {\n  return _fetchCategories.apply(this, arguments);\n}\n\nfunction _fetchCategories() {\n  _fetchCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var categories;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            categories = inventory.reduce(function (acc, next) {\n              next.categories.map(function (category) {\n                if (acc.includes(category)) return;\n                acc.push(category);\n              });\n              return acc;\n            }, []);\n            return _context.abrupt(\"return\", Promise.resolve(categories));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchCategories.apply(this, arguments);\n}\n\nexport default fetchCategories;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/jamstack-ecommerce/utils/categoryProvider.js"],"names":["inventory","fetchCategories","categories","reduce","acc","next","map","category","includes","push","Promise","resolve"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;SAEeC,e;;;;;8EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,UADR,GACqBF,SAAS,CAACG,MAAV,CAAiB,UAACC,GAAD,EAAMC,IAAN,EAAe;AACjDA,cAAAA,IAAI,CAACH,UAAL,CAAgBI,GAAhB,CAAoB,UAAAC,QAAQ,EAAI;AAC9B,oBAAIH,GAAG,CAACI,QAAJ,CAAaD,QAAb,CAAJ,EAA4B;AAC5BH,gBAAAA,GAAG,CAACK,IAAJ,CAASF,QAAT;AACD,eAHD;AAIA,qBAAOH,GAAP;AACD,aANkB,EAMhB,EANgB,CADrB;AAAA,6CAQSM,OAAO,CAACC,OAAR,CAAgBT,UAAhB,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,eAAeD,eAAf","sourcesContent":["import inventory from './inventory'\r\n\r\nasync function fetchCategories () {\r\n  const categories = inventory.reduce((acc, next) => {\r\n    next.categories.map(category => {\r\n      if (acc.includes(category)) return\r\n      acc.push(category)\r\n    })\r\n    return acc\r\n  }, [])\r\n  return Promise.resolve(categories)\r\n}\r\n\r\nexport default fetchCategories"]},"metadata":{},"sourceType":"module"}